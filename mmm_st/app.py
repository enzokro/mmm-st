# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_app.ipynb.

# %% auto 0
__all__ = ['app', 'SharedResources', 'TransformationThread', 'set_prompt', 'get_transformed_image', 'serve_pil_image', 'cleanup',
           'main']

# %% ../nbs/02_app.ipynb 2
from flask import Flask, jsonify, request, send_file, current_app
from io import BytesIO
import threading
import atexit
import fire
from video import VideoStreamer
from diffuse import get_transformer
from config import Config


# %% ../nbs/02_app.ipynb 3
app = Flask(__name__)

class SharedResources:
    def __init__(self, transformer_type=None):
        self.transformer_type = transformer_type or Config.TRANSFORMER_TYPE
        self.image_transformer = get_transformer(self.transformer_type)
        self.transform_lock = threading.Lock()
        self.shutdown_event = threading.Event()
        self.video_streamer = VideoStreamer(0, capture_props=Config.CAP_PROPS, event=self.shutdown_event)
        self.current_frame = None
        self.prompt = None

class TransformationThread(threading.Thread):
    def __init__(self, shared_resources):
        super().__init__(daemon=True)
        self.shared_resources = shared_resources

    def run(self):
        print("Transformation thread starting...")
        self.shared_resources.video_streamer.start()
        while not self.shared_resources.shutdown_event.is_set():
            frame = self.shared_resources.video_streamer.get_current_frame()
            if frame and self.shared_resources.prompt:
                with self.shared_resources.transform_lock:
                    transformed_image = self.shared_resources.image_transformer(frame, self.shared_resources.prompt)
                    self.shared_resources.current_frame = transformed_image
            elif frame:
                self.shared_resources.current_frame = frame

            if self.shared_resources.shutdown_event.is_set():
                break
    
        print("Transformation thread exiting.")

@app.route('/set_prompt', methods=['POST'])
def set_prompt():
    prompt = request.json.get('prompt')
    if not prompt:
        return jsonify({"error": "Prompt is required"}), 400
    with current_app.shared_resources.transform_lock:
        current_app.shared_resources.prompt = prompt
    return jsonify({"message": "Prompt set successfully"}), 200

@app.route('/get_transformed_image', methods=['GET'])
def get_transformed_image():
    with current_app.shared_resources.transform_lock:
        image = current_app.shared_resources.current_frame
    if image is None:
        return jsonify({"error": "No image available"}), 404
    return serve_pil_image(image)

def serve_pil_image(image):
    img_byte_arr = BytesIO()
    image.save(img_byte_arr, format='JPEG')
    img_byte_arr.seek(0)
    return send_file(
        img_byte_arr, 
        mimetype='image/jpeg', 
        as_attachment=True, 
        attachment_filename='transformed_image.jpg',
    )

def cleanup(shared_resources, transformation_thread):
    print("Application is shutting down. Cleaning up resources.")
    shared_resources.shutdown_event.set()
    shared_resources.video_streamer.stop()
    transformation_thread.join()

def main(transformer_name: str = Config.TRANSFORMER_TYPE, host: str = Config.HOST, port: int = Config.PORT):
    shared_resources = SharedResources(transformer_name)
    app.shared_resources = shared_resources
    transformation_thread = TransformationThread(shared_resources)
    transformation_thread.start()
    atexit.register(cleanup, shared_resources, transformation_thread)
    app.run(host=host, port=port)

# %% ../nbs/02_app.ipynb 4
if __name__ == "__main__":
    fire.Fire(main)
